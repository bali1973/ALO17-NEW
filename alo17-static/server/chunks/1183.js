"use strict";exports.id=1183,exports.ids=[1183],exports.modules={31183:(a,b,c)=>{c.d(b,{z:()=>h});var d=c(29021),e=c(33873),f=c.n(e);class g{async $connect(){console.log("Mock Prisma connected")}async $disconnect(){console.log("Mock Prisma disconnected")}async $queryRaw(a){return console.log("Mock query:",a),[{current_time:new Date}]}constructor(){this.user={findMany:async a=>{try{console.log("Mock Prisma findMany called with params:",a);let b=await d.promises.readFile(f().join(process.cwd(),"public","users.json"),"utf-8"),c=JSON.parse(b);if(console.log("Total users loaded in findMany:",c.length),a?.where){let b=a.where;console.log("Applying filters in findMany:",b),b.OR&&(c=c.filter(a=>b.OR.some(b=>b.name?.contains?a.name?.toLowerCase().includes(b.name.contains.toLowerCase()):!!b.email?.contains&&a.email?.toLowerCase().includes(b.email.contains.toLowerCase())))),b.role&&(c=c.filter(a=>a.role===b.role)),b.status&&(c=c.filter(a=>a.status===b.status))}if(a?.orderBy?.createdAt==="desc"?c.sort((a,b)=>new Date(b.createdAt).getTime()-new Date(a.createdAt).getTime()):a?.orderBy?.createdAt==="asc"&&c.sort((a,b)=>new Date(a.createdAt).getTime()-new Date(b.createdAt).getTime()),a?.skip!==void 0&&a?.take!==void 0){let b=parseInt(a.skip)||0,d=parseInt(a.take)||10;console.log("Applying pagination - skip:",b,"take:",d),c=c.slice(b,b+d)}return console.log("Users returned from findMany:",c.length),c}catch(a){return console.error("Mock Prisma findMany error:",a),[]}},findUnique:async a=>{try{let b=await d.promises.readFile(f().join(process.cwd(),"public","users.json"),"utf-8");return JSON.parse(b).find(b=>b.id===a.where.id||b.email===a.where.email)}catch{return null}},count:async a=>{try{console.log("Mock Prisma count called with params:",a);let b=await d.promises.readFile(f().join(process.cwd(),"public","users.json"),"utf-8"),c=JSON.parse(b);if(console.log("Total users loaded:",c.length),a?.where){let b=a.where;console.log("Applying filters:",b),b.OR&&(c=c.filter(a=>b.OR.some(b=>b.name?.contains?a.name?.toLowerCase().includes(b.name.contains.toLowerCase()):!!b.email?.contains&&a.email?.toLowerCase().includes(b.email.contains.toLowerCase())))),b.role&&(c=c.filter(a=>a.role===b.role)),b.status&&(c=c.filter(a=>a.status===b.status))}return console.log("Users after filtering:",c.length),c.length}catch(a){return console.error("Mock Prisma count error:",a),0}},create:async a=>{try{let b=await d.promises.readFile(f().join(process.cwd(),"public","users.json"),"utf-8"),c=JSON.parse(b),e={...a.data,id:Date.now().toString()};return c.push(e),await d.promises.writeFile(f().join(process.cwd(),"public","users.json"),JSON.stringify(c,null,2)),e}catch{return null}}},this.notificationSubscription={findFirst:async a=>{try{console.log("Mock Prisma notificationSubscription.findFirst called with params:",a);let b=await d.promises.readFile(f().join(process.cwd(),"public","notificationSubscriptions.json"),"utf-8"),c=JSON.parse(b);if(a?.where){let b=a.where;return c.find(a=>(!b.email||a.email===b.email)&&(!b.category||a.category===b.category)&&(!b.subcategory||a.subcategory===b.subcategory))}return c[0]||null}catch(a){return console.error("Mock Prisma notificationSubscription.findFirst error:",a),null}},findMany:async a=>{try{let a=await d.promises.readFile(f().join(process.cwd(),"public","notificationSubscriptions.json"),"utf-8");return JSON.parse(a)}catch{return[]}},create:async a=>{try{let b=await d.promises.readFile(f().join(process.cwd(),"public","notificationSubscriptions.json"),"utf-8"),c=JSON.parse(b),e={...a.data,id:Date.now().toString()};return c.push(e),await d.promises.writeFile(f().join(process.cwd(),"public","notificationSubscriptions.json"),JSON.stringify(c,null,2)),e}catch{return null}},delete:async a=>{try{let b=await d.promises.readFile(f().join(process.cwd(),"public","notificationSubscriptions.json"),"utf-8"),c=JSON.parse(b);return c=c.filter(b=>!!(a?.where?.email&&b.email!==a.where.email||a?.where?.category&&b.category!==a.where.category||a?.where?.subcategory&&b.subcategory!==a.where.subcategory)),await d.promises.writeFile(f().join(process.cwd(),"public","notificationSubscriptions.json"),JSON.stringify(c,null,2)),{count:1}}catch{return{count:0}}}},this.listing={findMany:async a=>{try{let b=await d.promises.readFile(f().join(process.cwd(),"public","listings.json"),"utf-8"),c=JSON.parse(b),e=a?.where;return e&&(e.category&&(c=c.filter(a=>a.category===e.category)),e.subcategory&&(c=c.filter(a=>a.subcategory===e.subcategory))),a?.orderBy?.createdAt==="desc"?c.sort((a,b)=>new Date(b.createdAt).getTime()-new Date(a.createdAt).getTime()):a?.orderBy?.createdAt==="asc"&&c.sort((a,b)=>new Date(a.createdAt).getTime()-new Date(b.createdAt).getTime()),c}catch{return[]}},findUnique:async a=>{try{let b=await d.promises.readFile(f().join(process.cwd(),"public","listings.json"),"utf-8");return JSON.parse(b).find(b=>b.id===a.where.id)}catch{return null}},create:async a=>{try{let b=await d.promises.readFile(f().join(process.cwd(),"public","listings.json"),"utf-8"),c=JSON.parse(b),e={...a.data,id:Date.now()};return c.push(e),await d.promises.writeFile(f().join(process.cwd(),"public","listings.json"),JSON.stringify(c,null,2)),e}catch{return null}},update:async a=>{try{let b=await d.promises.readFile(f().join(process.cwd(),"public","listings.json"),"utf-8"),c=JSON.parse(b),e=c.findIndex(b=>b.id===a.where.id);if(-1!==e)return c[e]={...c[e],...a.data},await d.promises.writeFile(f().join(process.cwd(),"public","listings.json"),JSON.stringify(c,null,2)),c[e];return null}catch{return null}},delete:async a=>{try{let b=await d.promises.readFile(f().join(process.cwd(),"public","listings.json"),"utf-8"),c=JSON.parse(b).filter(b=>b.id!==a.where.id);return await d.promises.writeFile(f().join(process.cwd(),"public","listings.json"),JSON.stringify(c,null,2)),{id:a.where.id}}catch{return null}}},this.category={findMany:async()=>{try{console.log("Reading categories.json...");let a=await d.promises.readFile(f().join(process.cwd(),"public","categories.json"),"utf-8");return console.log("Categories data loaded successfully"),JSON.parse(a)}catch(a){return console.error("Error reading categories.json:",a),[]}},findUnique:async a=>{try{let b=await d.promises.readFile(f().join(process.cwd(),"public","categories.json"),"utf-8");return JSON.parse(b).find(b=>b.slug===a.where.slug)}catch{return null}},create:async a=>{try{let b=await d.promises.readFile(f().join(process.cwd(),"public","categories.json"),"utf-8"),c=JSON.parse(b),e={...a.data,id:Date.now().toString(),subCategories:[]};return c.push(e),await d.promises.writeFile(f().join(process.cwd(),"public","categories.json"),JSON.stringify(c,null,2)),e}catch{return null}},update:async a=>{try{let b=await d.promises.readFile(f().join(process.cwd(),"public","categories.json"),"utf-8"),c=JSON.parse(b),e=c.findIndex(b=>b.id===a.where.id);if(-1!==e)return c[e]={...c[e],...a.data},await d.promises.writeFile(f().join(process.cwd(),"public","categories.json"),JSON.stringify(c,null,2)),c[e];return null}catch{return null}},delete:async a=>{try{let b=await d.promises.readFile(f().join(process.cwd(),"public","categories.json"),"utf-8"),c=JSON.parse(b).filter(b=>b.id!==a.where.id);return await d.promises.writeFile(f().join(process.cwd(),"public","categories.json"),JSON.stringify(c,null,2)),{id:a.where.id}}catch{return null}}},this.subCategory={findMany:async()=>{try{let a=await d.promises.readFile(f().join(process.cwd(),"public","categories.json"),"utf-8"),b=JSON.parse(a),c=[];for(let a of b)a.subCategories&&c.push(...a.subCategories);return c}catch{return[]}},findFirst:async a=>{try{let b=await d.promises.readFile(f().join(process.cwd(),"public","categories.json"),"utf-8");for(let c of JSON.parse(b)){let b=c.subCategories.find(b=>b.slug===a.where.slug&&b.categoryId===a.where.categoryId);if(b)return b}return null}catch{return null}},create:async a=>{try{let b=await d.promises.readFile(f().join(process.cwd(),"public","categories.json"),"utf-8"),c=JSON.parse(b),e=c.findIndex(b=>b.id===a.data.categoryId);if(-1!==e){let b={...a.data,id:Date.now().toString()};return c[e].subCategories.push(b),await d.promises.writeFile(f().join(process.cwd(),"public","categories.json"),JSON.stringify(c,null,2)),b}return null}catch{return null}},update:async a=>{try{let b=await d.promises.readFile(f().join(process.cwd(),"public","categories.json"),"utf-8"),c=JSON.parse(b);for(let b of c){let e=b.subCategories.findIndex(b=>b.id===a.where.id);if(-1!==e)return b.subCategories[e]={...b.subCategories[e],...a.data},await d.promises.writeFile(f().join(process.cwd(),"public","categories.json"),JSON.stringify(c,null,2)),b.subCategories[e]}return null}catch{return null}},delete:async a=>{try{let b=await d.promises.readFile(f().join(process.cwd(),"public","categories.json"),"utf-8"),c=JSON.parse(b);for(let b of c){let e=b.subCategories.findIndex(b=>b.id===a.where.id);if(-1!==e)return b.subCategories.splice(e,1),await d.promises.writeFile(f().join(process.cwd(),"public","categories.json"),JSON.stringify(c,null,2)),{id:a.where.id}}return null}catch{return null}}}}}let h=globalThis.prisma??new g}};