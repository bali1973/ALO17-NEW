"use strict";exports.id=2833,exports.ids=[2833],exports.modules={92833:(a,b,c)=>{c.d(b,{security:()=>e});class d{static getInstance(){return d.instance||(d.instance=new d),d.instance}logEvent(a,b,c,d,e,f){let g={id:`security_${Date.now()}_${Math.random().toString(36).substr(2,9)}`,type:a,severity:b,ip:c,userId:e,userAgent:f,details:d,timestamp:Date.now(),resolved:!1};this.events.push(g),this.events.length>1e3&&this.events.splice(0,this.events.length-1e3),"critical"===b&&this.handleCriticalEvent(g),console.log(`[SECURITY] ${b.toUpperCase()}: ${a} from ${c}`,d)}checkLoginAttempt(a,b){let c=this.failedLogins.get(a);if(c&&c.lockedUntil&&Date.now()<c.lockedUntil){let d=Math.ceil((c.lockedUntil-Date.now())/6e4);return this.logEvent("login_attempt","medium",a,{email:b,reason:"account_locked",remainingMinutes:d}),{allowed:!1,reason:`Account locked. Try again in ${d} minutes.`}}return{allowed:!0}}recordFailedLogin(a,b,c){let d=this.failedLogins.get(a)||{count:0,lastAttempt:0};d.count++,d.lastAttempt=Date.now(),d.count>=this.config.maxLoginAttempts?(d.lockedUntil=Date.now()+60*this.config.lockoutDuration*1e3,this.logEvent("failed_login","high",a,{email:b,reason:"max_attempts_exceeded",attempts:d.count,lockoutDuration:this.config.lockoutDuration})):this.logEvent("failed_login","medium",a,{email:b,reason:c,attempts:d.count}),this.failedLogins.set(a,d)}recordSuccessfulLogin(a,b,c){this.failedLogins.delete(a),this.logEvent("login_attempt","low",a,{email:b,userId:c,success:!0})}checkSuspiciousActivity(a,b){for(let c of this.config.suspiciousPatterns)if(c.test(a))return this.logEvent("suspicious_activity","high",b,{input:a.substring(0,100),pattern:c.source,type:"pattern_match"}),{suspicious:!0,pattern:c.source};return{suspicious:!1}}checkFileUpload(a,b,c,d){if(b>this.config.maxFileSize)return this.logEvent("file_upload","medium",c,{filename:a,fileSize:b,reason:"file_too_large",userId:d}),{allowed:!1,reason:"File size exceeds limit"};let e=a.toLowerCase().substring(a.lastIndexOf("."));return this.config.allowedFileTypes.includes(e)?this.checkSuspiciousActivity(a,c).suspicious?{allowed:!1,reason:"Suspicious filename detected"}:(this.logEvent("file_upload","low",c,{filename:a,fileSize:b,fileExtension:e,userId:d,success:!0}),{allowed:!0}):(this.logEvent("file_upload","high",c,{filename:a,fileExtension:e,reason:"file_type_not_allowed",userId:d}),{allowed:!1,reason:"File type not allowed"})}checkAdminAccess(a,b){return this.config.adminIPWhitelist.includes(a)?(this.logEvent("admin_access","low",a,{userId:b,success:!0}),{allowed:!0}):(this.logEvent("admin_access","high",a,{userId:b,reason:"ip_not_whitelisted"}),{allowed:!1,reason:"IP not in admin whitelist"})}checkRateLimit(a,b){return Date.now(),{allowed:!0}}getEvents(a){let b=[...this.events];return a&&(a.type&&(b=b.filter(b=>b.type===a.type)),a.severity&&(b=b.filter(b=>b.severity===a.severity)),a.ip&&(b=b.filter(b=>b.ip===a.ip)),a.userId&&(b=b.filter(b=>b.userId===a.userId)),void 0!==a.resolved&&(b=b.filter(b=>b.resolved===a.resolved)),a.startDate&&(b=b.filter(b=>b.timestamp>=a.startDate)),a.endDate&&(b=b.filter(b=>b.timestamp<=a.endDate))),b.sort((a,b)=>b.timestamp-a.timestamp)}resolveEvent(a){let b=this.events.find(b=>b.id===a);return!!b&&(b.resolved=!0,!0)}getStats(){let a=Date.now(),b=a-864e5,c={},d={};this.events.forEach(a=>{c[a.type]=(c[a.type]||0)+1,d[a.severity]=(d[a.severity]||0)+1});let e=Array.from(this.failedLogins.values()).filter(b=>b.lockedUntil&&a<b.lockedUntil).length;return{totalEvents:this.events.length,eventsByType:c,eventsBySeverity:d,recentEvents:this.events.filter(a=>a.timestamp>=b).length,unresolvedEvents:this.events.filter(a=>!a.resolved).length,lockedIPs:e}}handleCriticalEvent(a){switch(a.type){case"sql_injection":case"xss_attempt":this.blockIP(a.ip,36e5);break;case"failed_login":a.details.attempts>=this.config.maxLoginAttempts&&this.blockIP(a.ip,864e5)}}blockIP(a,b){console.log(`[SECURITY] Blocking IP ${a} for ${b/6e4} minutes`)}updateConfig(a){this.config={...this.config,...a}}clearEvents(a){a?this.events=this.events.filter(b=>b.timestamp>=a):this.events=[]}clearFailedLogins(){this.failedLogins.clear()}constructor(){this.events=[],this.failedLogins=new Map,this.config={maxLoginAttempts:5,lockoutDuration:15,suspiciousPatterns:[/<script\b[^<]*(?:(?!<\/script>)<[^<]*)*<\/script>/i,/javascript:/i,/on\w+\s*=/i,/union\s+select/i,/drop\s+table/i,/delete\s+from/i,/insert\s+into/i,/update\s+set/i],allowedFileTypes:[".jpg",".jpeg",".png",".gif",".pdf",".doc",".docx"],maxFileSize:0xa00000,adminIPWhitelist:["127.0.0.1","::1"]}}}let e=d.getInstance()}};