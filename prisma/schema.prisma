// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "sqlite"
  url      = env("DATABASE_URL")
}

model User {
  id            String    @id @default(cuid())
  name          String?
  email         String    @unique
  password      String?
  phone         String?
  location      String?
  role          String    @default("user") // "user" veya "admin"
  emailVerified DateTime?
  image         String?
  createdAt     DateTime  @default(now())
  updatedAt     DateTime  @updatedAt

  // Relations
  listings      Listing[]
  accounts      Account[]
  sessions      Session[]
  coupons       Coupon[]  @relation("UserCoupons")
  favorites     UserFavorite[]
  sentMessages     Message[] @relation("SentMessages")
  receivedMessages Message[] @relation("ReceivedMessages")
}

model Account {
  id                String  @id @default(cuid())
  userId            String
  type              String
  provider          String
  providerAccountId String
  refresh_token     String?
  access_token      String?
  expires_at        Int?
  token_type        String?
  scope             String?
  id_token          String?
  session_state     String?

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([provider, providerAccountId])
}

model Session {
  id           String   @id @default(cuid())
  sessionToken String   @unique
  userId       String
  expires      DateTime
  user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model VerificationToken {
  identifier String
  token      String   @unique
  expires    DateTime

  @@unique([identifier, token])
}

model Category {
  id            String        @id @default(cuid())
  name          String        @unique
  slug          String        @unique
  subCategories SubCategory[]
  createdAt     DateTime      @default(now())
  updatedAt     DateTime      @updatedAt
}

model SubCategory {
  id          String   @id @default(cuid())
  name        String
  slug        String
  categoryId  String
  category    Category @relation(fields: [categoryId], references: [id])
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt

  @@unique([name, categoryId])
}

model Listing {
  id          String   @id @default(cuid())
  title       String
  description String
  price       Float
  location    String
  category    String
  subCategory String?
  images      String
  features    String
  condition   String
  brand       String?
  model       String?
  year        String?
  isPremium   Boolean  @default(false)
  premiumUntil DateTime?
  views       Int      @default(0)
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt
  userId      String
  user        User     @relation(fields: [userId], references: [id], onDelete: Cascade)
  favoritedBy UserFavorite[]
  messages    Message[]
}

model UserFavorite {
  id        String   @id @default(cuid())
  userId    String
  listingId String
  createdAt DateTime @default(now())
  user      User     @relation(fields: [userId], references: [id], onDelete: Cascade)
  listing   Listing  @relation(fields: [listingId], references: [id], onDelete: Cascade)

  @@unique([userId, listingId])
}

model Coupon {
  id          String    @id @default(cuid())
  code        String    @unique
  discount    Float     // İndirim yüzdesi (0-100 arası)
  maxUses     Int?      // Maksimum kullanım sayısı
  usedCount   Int       @default(0)
  expiresAt   DateTime?
  isActive    Boolean   @default(true)
  createdAt   DateTime  @default(now())
  updatedAt   DateTime  @updatedAt
  usedBy      User[]    @relation("UserCoupons")
}

model Message {
  id          String   @id @default(cuid())
  content     String
  senderName  String
  senderEmail String
  senderId    String   // Gönderen kullanıcının email'i
  receiverId  String   // Alıcı kullanıcının email'i
  listingId   String?  // İlan ID'si (opsiyonel)
  isRead      Boolean  @default(false)
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt

  // Relations
  listing     Listing? @relation(fields: [listingId], references: [id], onDelete: SetNull)
  sender      User     @relation("SentMessages", fields: [senderId], references: [email], onDelete: Cascade)
  receiver    User     @relation("ReceivedMessages", fields: [receiverId], references: [email], onDelete: Cascade)
} 