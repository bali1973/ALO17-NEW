generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "sqlite"
  url      = env("DATABASE_URL")
}

model User {
  id               String         @id @default(cuid())
  name             String?
  email            String         @unique
  password         String?
  phone            String?
  location         String?
  role             String         @default("user")
  emailVerified    DateTime?
  image            String?
  createdAt        DateTime       @default(now())
  updatedAt        DateTime       @updatedAt
  accounts         Account[]
  listings         Listing[]
  receivedMessages Message[]      @relation("ReceivedMessages")
  sentMessages     Message[]      @relation("SentMessages")
  sessions         Session[]
  favorites        UserFavorite[]
  coupons          Coupon[]       @relation("UserCoupons")
  reports          Report[]
  pushToken        String?
  notificationSubscriptions NotificationSubscription[]
}

model Account {
  id                String  @id @default(cuid())
  userId            String
  type              String
  provider          String
  providerAccountId String
  refresh_token     String?
  access_token      String?
  expires_at        Int?
  token_type        String?
  scope             String?
  id_token          String?
  session_state     String?
  user              User    @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([provider, providerAccountId])
}

model Session {
  id           String   @id @default(cuid())
  sessionToken String   @unique
  userId       String
  expires      DateTime
  user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model VerificationToken {
  identifier String
  token      String   @unique
  expires    DateTime

  @@unique([identifier, token])
}

model Category {
  id            String        @id @default(cuid())
  name          String
  slug          String        @unique
  icon          String?
  subCategories SubCategory[]
  createdAt     DateTime      @default(now())
  updatedAt     DateTime      @updatedAt
}

model SubCategory {
  id          String    @id @default(cuid())
  name        String
  slug        String
  categoryId  String
  createdAt   DateTime  @default(now())
  updatedAt   DateTime  @updatedAt
  category    Category  @relation(fields: [categoryId], references: [id])
  order       Int       @default(0)
  icon        String?

  parentId      String?
  parent        SubCategory?  @relation("SubCategoryChildren", fields: [parentId], references: [id])
  subCategories SubCategory[] @relation("SubCategoryChildren")

  @@unique([name, categoryId])
}

model Listing {
  id           String         @id @default(cuid())
  title        String
  description  String
  price        Float
  location     String
  category     String
  subcategory  String?
  images       String
  features     String
  condition    String
  brand        String?
  model        String?
  year         String?
  status       String         @default("pending")
  isPremium    Boolean        @default(false)
  premiumFeatures String?
  premiumUntil DateTime?
  premiumPlan  String?
  views        Int            @default(0)
  approvedAt   DateTime?
  rejectedAt   DateTime?
  createdAt    DateTime       @default(now())
  updatedAt    DateTime       @updatedAt
  userId       String
  user         User           @relation(fields: [userId], references: [id], onDelete: Cascade)
  messages     Message[]
  favoritedBy  UserFavorite[]
  reports      Report[]
  notificationHistory NotificationHistory[]
}

model UserFavorite {
  id        String   @id @default(cuid())
  userId    String
  listingId String
  createdAt DateTime @default(now())
  listing   Listing  @relation(fields: [listingId], references: [id], onDelete: Cascade)
  user      User     @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([userId, listingId])
}

model Coupon {
  id        String    @id @default(cuid())
  code      String    @unique
  discount  Float
  maxUses   Int?
  usedCount Int       @default(0)
  expiresAt DateTime?
  isActive  Boolean   @default(true)
  createdAt DateTime  @default(now())
  updatedAt DateTime  @updatedAt
  usedBy    User[]    @relation("UserCoupons")
}

model Message {
  id          String   @id @default(cuid())
  content     String
  senderName  String
  senderEmail String
  senderId    String
  receiverId  String
  listingId   String?
  isRead      Boolean  @default(false)
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt
  receiver    User     @relation("ReceivedMessages", fields: [receiverId], references: [email], onDelete: Cascade)
  sender      User     @relation("SentMessages", fields: [senderId], references: [email], onDelete: Cascade)
  listing     Listing? @relation(fields: [listingId], references: [id])
}

model PremiumPlan {
  id    String @id @default(cuid())
  name  String
  key   String @unique
  price Float
  days  Int
}

model Report {
  id         String   @id @default(cuid())
  listingId  String
  userId     String?
  message    String
  createdAt  DateTime @default(now())
  listing    Listing  @relation(fields: [listingId], references: [id], onDelete: Cascade)
  user       User?    @relation(fields: [userId], references: [id], onDelete: SetNull)
}

// Monitoring Tables
model ErrorLog {
  id        String   @id @default(cuid())
  message   String
  stack     String?
  timestamp DateTime @default(now())
  userId    String?
  sessionId String?
  url       String
  userAgent String
  severity  String   // low, medium, high, critical
  category  String   // javascript, api, network, validation, auth
  metadata  String?  // JSON string
}

model PerformanceLog {
  id        String   @id @default(cuid())
  name      String
  duration  Float
  timestamp DateTime @default(now())
  userId    String?
  sessionId String?
  url       String
  category  String   // navigation, api, render, resource
  metadata  String?  // JSON string
}

model UserEventLog {
  id         String   @id @default(cuid())
  event      String
  timestamp  DateTime @default(now())
  userId     String?
  sessionId  String?
  url        String
  properties String?  // JSON string
}

// Notification Subscription System
model NotificationSubscription {
  id          String   @id @default(cuid())
  userId      String?
  email       String
  category    String?  // Belirli kategori için abonelik
  subcategory String?  // Belirli alt kategori için abonelik
  keywords    String?  // Anahtar kelimeler (JSON array)
  priceRange  String?  // Fiyat aralığı (JSON: {min: number, max: number})
  location    String?  // Konum filtresi
  frequency   String   @default("instant") // instant, daily, weekly
  isActive    Boolean  @default(true)
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt
  user        User?    @relation(fields: [userId], references: [id], onDelete: Cascade)
  notifications NotificationHistory[]
  
  @@unique([email, category, subcategory])
}

model NotificationHistory {
  id           String   @id @default(cuid())
  subscriptionId String
  listingId    String
  email        String
  subject      String
  content      String
  sentAt       DateTime @default(now())
  isRead       Boolean  @default(false)
  openedAt     DateTime?
  subscription NotificationSubscription @relation(fields: [subscriptionId], references: [id], onDelete: Cascade)
  listing      Listing  @relation(fields: [listingId], references: [id], onDelete: Cascade)
}
